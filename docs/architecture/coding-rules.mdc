# コーディングルール

## 1. TypeScript

### 1.1 型定義
- 型定義は`src/types`または`deploy/next/types`ディレクトリに配置
- コンポーネントのPropsは必ず型定義を行う
- `any`型の使用は避ける
- ジェネリック型を活用する

### 1.2 インターフェース
- インターフェース名は`PascalCase`で記述
- Props型は`ComponentNameProps`の形式で命名
- 共通の型は`Common`プレフィックスを使用

### 1.3 型エクスポート
- 型定義は明示的にエクスポート
- バレル（index.ts）を活用してエクスポートを整理

## 2. コンポーネント

### 2.1 ファイル構成
- コンポーネントは`src/components`に配置
- 機能ごとにサブディレクトリを作成
- テストは同じディレクトリに配置

### 2.2 命名規則
- コンポーネントファイル: `PascalCase.tsx`
- スタイルファイル: `PascalCase.module.css`
- テストファイル: `PascalCase.test.tsx`

### 2.3 実装規則
- 関数コンポーネントを使用
- Hooks規則に従う
- Props は分割代入で受け取る
- デフォルト値を適切に設定

## 3. スタイリング

### 3.1 Tailwind CSS
- ユーティリティクラスを優先して使用
- カスタムクラスは`@apply`で定義
- レスポンシブデザインはTailwindのブレークポイントを使用

### 3.2 CSS Modules
- コンポーネント固有のスタイルに使用
- クラス名は`camelCase`で記述
- グローバルスタイルは最小限に抑える

## 4. ファイル構成

### 4.1 ディレクトリ構造
```
src/
  ├── components/     # UIコンポーネント
  ├── pages/         # ページコンポーネント
  ├── types/         # 型定義
  ├── utils/         # ユーティリティ関数
  ├── hooks/         # カスタムフック
  ├── styles/        # グローバルスタイル
  └── lib/           # 外部ライブラリ設定
```

### 4.2 インポート規則
- 相対パスではなく`@`エイリアスを使用
- インポート順序を統一
  1. React/Next.js
  2. 外部ライブラリ
  3. 内部コンポーネント
  4. 型定義
  5. スタイル

## 5. テスト

### 5.1 テスト規則
- Jest + React Testing Libraryを使用
- コンポーネントの主要機能をテスト
- インテグレーションテストを重視
- モックは最小限に抑える

### 5.2 テストファイル構成
```typescript
describe('ComponentName', () => {
  it('should render correctly', () => {
    // テストコード
  });

  it('should handle user interactions', () => {
    // テストコード
  });
});
```

## 6. コミット規則

### 6.1 コミットメッセージ
- 形式: `type(scope): description`
- type:
  - feat: 新機能
  - fix: バグ修正
  - docs: ドキュメント
  - style: スタイル変更
  - refactor: リファクタリング
  - test: テスト関連
  - chore: その他

### 6.2 ブランチ戦略
- main: プロダクション
- develop: 開発
- feature/*: 機能開発
- fix/*: バグ修正
- release/*: リリース準備 